Design Notes:  Hello NUnit
===================================================
Assumptions:  

- Not using actual IoC container, dependency injection
is manual.
===================================================
Description:

Console application that accepts input and writes it
back to the console as a greeting.
===================================================
Concepts Illustrated:
- Top-down design
- Test-Driven Development
- NUnit
- Moq
- Dependency Injection
===================================================
Stub out initial test for Program.cs

Tests:
	Constructor_Always_Succeeds
===================================================
Introduce Greeter

IGreeter
	void Greet(string userName)

Greeter : IGreeter [stub]

GreeterTests
	Constructor_Always_Succeeds [stub]

Program
	Main
		Instantiate Greeter

ProgramTests [Delete]
	
===================================================
Implement Greeter

IConsoleWriter
	void WriteLine(message, params string[] args)

ConsoleWriterImpl : IConsoleWriter

Greeter
	.ctor(IConsoleWriter writer)

GreeterTests
	Add Mock<IConsoleWriter> and inject into constructor
	Greet_Always_PerformsExpectedWork

===================================================
Add parameterized tests for Greeter

GreeterTests
	Greet_Always_PerformsExpectedWork
		Add TestCaseAttributes with specific test cases
		Add inbound string parameter
		Update mock expectation to use inbound parameter

Greeter
	Greet
		Update consoleWriter invocation to pass userName parameter
		and formatstring
===================================================
Stub out logging infrastructure

ILogger
	void Log(string message)

BitBucketLogger : ILogger
	Log
		Discards message

BitBucketLoggerTests
	Constructor_Always_PerformsExpectedWork

Greeter
	.ctor(..., ILogger logger)

Program
	Update to inject ILogger into Greeter instance
===================================================
Clean up GreeterTests before refactoring

GreeterTests
	Update to use MockRepository instead of individual mock creation
	Add Mock<ILogger>
	Add CreateMocks method
===================================================
Extract base test class

[TestFixture]
abstract TestBase<T> where T: class
	Move extracted methods from GreeterTests to base

GreeterTests
	Change to inherit from TestBase<Greeter>
	Remove methods extracted to TestBase

BitBucketLogger
	Change to inherit from TestBase<BitBucketLogger>
	Remove redundant methods and fields
===================================================
Extract base Logger class

Introduce abstract LoggerBase class
Introduce abstract LoggerBaseTests class
Update BitBucketLogger to descend from LoggerBase
Update BitBucketLoggerTests to descend from LoggerBaseTests

===================================================